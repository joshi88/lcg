
services:
  your_module.queue_worker_event_subscriber:
    class: Drupal\your_module\EventSubscriber\QueueWorkerEventSubscriber
    arguments: ['@plugin.manager.queue_worker', '@plugin.manager.mail']
    tags:
      - { name: event_subscriber }

// your_module/src/Event/QueueWorkerEvent.php

namespace Drupal\your_module\Event;

use Symfony\Component\EventDispatcher\Event;

class QueueWorkerEvent extends Event {

  const NAME = 'your_module.queue_worker_event';

  protected $records;

  public function __construct(array $records) {
    $this->records = $records;
  }

  public function getRecords() {
    return $this->records;
  }

}


// your_module/src/EventSubscriber/QueueWorkerEventSubscriber.php

namespace Drupal\your_module\EventSubscriber;

use Drupal\your_module\Event\QueueWorkerEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Drupal\Core\Queue\QueueWorkerManagerInterface;
use Drupal\Core\Mail\MailManagerInterface;

class QueueWorkerEventSubscriber implements EventSubscriberInterface {

  protected $queueWorkerManager;
  protected $mailer;

  public function __construct(QueueWorkerManagerInterface $queueWorkerManager, MailManagerInterface $mailer) {
    $this->queueWorkerManager = $queueWorkerManager;
    $this->mailer = $mailer;
  }

  public static function getSubscribedEvents() {
    return [
      QueueWorkerEvent::NAME => 'onQueueWorkerEvent',
    ];
  }

  public function onQueueWorkerEvent(QueueWorkerEvent $event) {
    $records = $event->getRecords();
    $body = ''; // Build your email body here.

    // Send email.
    $message = [
      'subject' => t('New Queue Worker Records Created'),
      'body' => $body,
    ];

    $this->mailer->mail('your_module', 'queue_worker_records', 'recipient@example.com', \Drupal::currentUser()->getPreferredLangcode(), $message);
  }
}
