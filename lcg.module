# your_module.services.yml

services:
  your_module.queue_worker_event_subscriber:
    class: Drupal\your_module\EventSubscriber\QueueWorkerEventSubscriber
    arguments: ['@plugin.manager.mail']
    tags:
      - { name: event_subscriber }

  your_module.event_dispatcher:
    class: Symfony\Component\EventDispatcher\EventDispatcher


// your_module.module

use Drupal\your_module\Event\QueueWorkerEvent;

/**
 * Implements hook_cron().
 */
function your_module_cron() {
  // Create an instance of your queue worker.
  $queue_worker = \Drupal::service('plugin.manager.queue_worker')->createInstance('your_queue_worker_id');
  
  // Get processed records.
  $records = $queue_worker->getProcessedRecords();
  
  // Dispatch the event.
  \Drupal::service('event_dispatcher')->dispatch(QueueWorkerEvent::NAME, new QueueWorkerEvent($records));
}

// your_module/src/EventSubscriber/QueueWorkerEventSubscriber.php

namespace Drupal\your_module\EventSubscriber;

use Drupal\your_module\Event\QueueWorkerEvent;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Drupal\Core\Mail\MailManagerInterface;

class QueueWorkerEventSubscriber implements EventSubscriberInterface {

  protected $mailer;

  public function __construct(MailManagerInterface $mailer) {
    $this->mailer = $mailer;
  }

  public static function getSubscribedEvents() {
    return [
      QueueWorkerEvent::NAME => 'onQueueWorkerEvent',
    ];
  }

  public function onQueueWorkerEvent(QueueWorkerEvent $event) {
    $records = $event->getRecords();
    $body = ''; // Build your email body here.

    // Send email.
    $message = [
      'subject' => t('New Queue Worker Records Created'),
      'body' => $body,
    ];

    $this->mailer->mail('your_module', 'queue_worker_records', 'recipient@example.com', \Drupal::currentUser()->getPreferredLangcode(), $message);
  }
}
