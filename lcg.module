// your_module/src/EventSubscriber/QueueWorkerEventSubscriber.php

namespace Drupal\your_module\EventSubscriber;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\KernelEvents;
use Symfony\Component\HttpKernel\Event\RequestEvent;
use Drupal\Core\Queue\QueueWorkerManagerInterface;
use Drupal\Core\Mail\MailManagerInterface;

class QueueWorkerEventSubscriber implements EventSubscriberInterface {

  protected $queueWorkerManager;
  protected $mailer;

  public function __construct(QueueWorkerManagerInterface $queueWorkerManager, MailManagerInterface $mailer) {
    $this->queueWorkerManager = $queueWorkerManager;
    $this->mailer = $mailer;
  }

  public static function getSubscribedEvents() {
    return [
      KernelEvents::REQUEST => 'onKernelRequest',
    ];
  }

  public function onKernelRequest(RequestEvent $event) {
    if (\Drupal::service('cron')->getLastRunTime() > REQUEST_TIME - 60 * 60 * 24) {
      $queue_worker = $this->queueWorkerManager->createInstance('your_queue_worker_id');
      $records = $queue_worker->getProcessedRecords();

      // Send email.
      $message = [
        'subject' => t('New Queue Worker Records Created'),
        'body' => 'Debugging message: Records processed: ' . print_r($records, true),
      ];

      $this->mailer->mail('your_module', 'queue_worker_records', 'recipient@example.com', \Drupal::currentUser()->getPreferredLangcode(), $message);
    }
  }
}
