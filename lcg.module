<?php

use Symfony\Component\HttpFoundation\Response;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;


function domcs_cron(){
    $filename = 'public://sitemap.xml';
    $data = generate();
    file_put_contents($filename, $data);
}

/**
   * Generates the custom sitemap XML.
   */
function generate() {
    $output = '<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
  
    // Fetch all published nodes for each language.
    $languages = \Drupal::languageManager()->getLanguages();
    foreach ($languages as $language) {
      // Set the current language for fetching content.
      \Drupal::languageManager()->setConfigOverrideLanguage($language);
  
      // Fetch all published nodes for the current language.
      $nodes = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->getQuery()
        ->condition('status', 1)
        ->accessCheck(TRUE) // Apply access checking
        ->execute();
  
      foreach ($nodes as $node_id) {
        $node = \Drupal\node\Entity\Node::load($node_id);
        // Check if the node translation exists for this language.
        if ($node->hasTranslation($language->getId())) {
          $translated_node = $node->getTranslation($language->getId());
          $output .= generate_url_entry($translated_node->toUrl()->setAbsolute());
        }
      }
    }
  
    // Fetch all published taxonomy terms for each language.
    $vocabularies = \Drupal\taxonomy\Entity\Vocabulary::loadMultiple();
    foreach ($vocabularies as $vocabulary) {
      $terms = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadTree($vocabulary->id(), 0, NULL, TRUE);
  
      foreach ($terms as $term) {
        // Check if the term translation exists for this language.
        if ($term->hasTranslation($language->getId())) {
          $translated_term = $term->getTranslation($language->getId());
          $output .= generate_url_entry($translated_term->toUrl()->setAbsolute());
        }
      }
    }
  
    $output .= '</urlset>';
  
    return $output;
  }
  
  

/**
 * Generates a single URL entry for the sitemap.
 */
function generate_url_entry(Url $url) {
    return '<url>
      <loc>' . $url->setAbsolute()->toString() . '</loc>
      <lastmod>' . date('c') . '</lastmod>
      <changefreq>weekly</changefreq>
      <priority>0.8</priority>
    </url>';
  }
